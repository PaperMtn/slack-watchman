[tool.poetry]
name = "slack-watchman"
version = "4.4.2"
description = "Monitoring and enumerating Slack for exposed secrets"
authors = ["PaperMtn <papermtn@protonmail.com>"]
license = "GPL-3.0"
readme = "README.md"
homepage = "https://github.com/PaperMtn/slack-watchman"
repository = "https://github.com/PaperMtn/slack-watchman"
keywords = [ "audit", "slack", "slack-watchman", "watchman", "blue-team", "red-team", "threat-hunting" ]
classifiers = [
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
]

[tool.poetry.urls]
"Blog" = "https://papermtn.co.uk/category/tools/slack-watchman/"

[tool.poetry.dependencies]
python = ">=3.10"
colorama = "^0.4.6"
pyyaml = "^6.0.2"
requests = "^2.32.4"
beautifulsoup4 = "^4.13.4"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
coverage = "^7.2.3"
pylint = "^3.3.1"

[tool.poetry.scripts]
slack-watchman = "slack_watchman:main"

[tool.pylint.messages_control]
max-line-length = 120
max-attributes = 10
max-args = 10
disable = [
    "missing-module-docstring",
    "too-few-public-methods",
    "arguments-differ",
    "logging-fstring-interpolation",
    "no-else-return",
    "no-else-raise",
    "inconsistent-return-statements",
    "broad-exception-caught",
    "duplicate-code",
]

[tool.pytest.ini_options]
filterwarnings = [
    "error",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = [
    "src",
    "slack_watchman"
]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/__main__.py",
    "*/setup.py",
    "*/manage.py",
    "*/env/*",
]

[tool.coverage.report]
show_missing = true
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "import pbd",
    "pdb.set_trace()",
]

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
